{"version":3,"sources":["Components/ImageUploadBtn.jsx","Components/NavContext.jsx","Components/Nav.jsx","Components/Loader.jsx","Components/ImageCard.jsx","Components/Cluster.jsx","Components/Clusters.jsx","Components/VerticalCluster.jsx","Components/FullscreenView.jsx","Components/CullingView.jsx","App.jsx","index.js"],"names":["ImageUploadBtn","setAreImagesUploaded","setimageBlobArr","imageBlobArr","setAreImagesLoaded","imageFileArr","images2DArray","compareSecondColumn","a","b","sortByDateTimeOriginal","img2DArr","sort","getMetaData","file","exifr","parse","tags","DateTimeOriginal","valueOf","e","push","target","files","i","length","createdTimeInMilisecs","URL","createObjectURL","StyledUploadBtnSection","className","style","height","id","type","accept","onChange","multiple","autoFocus","styled","div","NavContext","createContext","NavProvider","props","useState","numberOfSelectedImagesTotal","setNumberOfSelectedImagesTotal","acceptedImageKeys","setAcceptedImageKeys","storedClusters","setStoredClusters","selectedImageKey","setSelectedImageKey","useEffect","Provider","value","numberOfSelectedImages","globalAcceptedImages","globalyStoredClusters","globalSelectedImageKey","children","Nav","useContext","totalNumSelectedImages","setSelectedImages","StyledNavSection","nav","Loader","StyledLoaderSection","section","ImageCard","isSelected","setIsSelected","isAccepted","setIsAccepted","setTotalNumSelectedImages","acceptImage","setLlocalNumberOfSelectedImages","prev","acceptedImageKeysCopy","splice","indexOf","blob","includes","rejected","data-name","xmlns","width","viewBox","onClick","fill","transform","d","stroke","strokeWidth","accepted","x","y","strokeLinejoin","StyledImageCardSection","isFullscreen","isFullScreen","StyledImageContainer","StyledImage","src","alt","textAlign","img","require","Cluster","localNumberOfSelectedImages","acceptedImagesKeys","setAcceptedImagesKeys","isOpen","setIsOpen","clustersArray","map","index","copy","some","elements","element","console","log","imageCards","StyledFullscreenClusterContainer","StyledRowContainer","StyledColumnContainer","StyledSelectedText","StyledOpenButton","arrowOpen","arrowClosed","StyledClusterContainer","p","button","Clusters","clusterArray","prevClusterIndex","clusterNum","prevDateTimeOriginal","Math","abs","newCluster","slice","setOffset","currentClusterIndex","nextClusterIndex","StyledVertClusterSection","FullscreenView","findIndex","clusterIndex","setClusterIndex","filter","find","acceptedClustersImages","setAcceptedClustersImages","nonAcceptedClustersImages","setNonAcceptedClustersImages","StyledFullscreenSection","direction","font-size","font-family","letter-spacing","isAcceptedCluster","ii","fullscreen","CullingView","setIsFullScreen","changeOffset","document","querySelector","scrollIntoView","behavior","block","handleKeyDown","preventDefault","key","getElementById","display","body","overflow","error","window","addEventListener","removeEventListener","netflix","StyledNetflixSection","App","uploadBtn","areImagesUploaded","areImagesLoaded","StyledAppSection","ReactDom","render"],"mappings":"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","file":"static/js/main.383e48d5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport exifr from \"exifr\"; // for getting image metadata\r\nimport styled from \"styled-components\";\r\n\r\nexport default function ImageUploadBtn({\r\n  setAreImagesUploaded,\r\n  setimageBlobArr,\r\n  imageBlobArr,\r\n  setAreImagesLoaded,\r\n}) {\r\n  const imageFileArr = [];\r\n  const images2DArray = [];\r\n\r\n  function compareSecondColumn(a, b) {\r\n    if (a[1] === b[1]) {\r\n      return 0;\r\n    } else {\r\n      return a[1] < b[1] ? -1 : 1;\r\n    }\r\n  }\r\n\r\n  function sortByDateTimeOriginal(img2DArr) {\r\n    img2DArr.sort(compareSecondColumn);\r\n    // console.log(\"Sorted!\");\r\n  }\r\n\r\n  async function getMetaData(file) {\r\n    const tags = await exifr.parse(file, [\"DateTimeOriginal\"]);\r\n    const { DateTimeOriginal } = tags;\r\n    return DateTimeOriginal.valueOf();\r\n  }\r\n\r\n  async function loadImages(e) {\r\n    setAreImagesUploaded(true);\r\n    //console.log(e.target.files); // this gives an image file\r\n\r\n    imageFileArr.push(e.target.files); // gets a file object with all files\r\n    // Loop trough all the local images and creat blob elements for later use\r\n    for (let i = 0; i < imageFileArr[0].length; i++) {\r\n      // get the created date from the meta data of the images\r\n      const createdTimeInMilisecs = await getMetaData(imageFileArr[0][i]);\r\n      images2DArray.push([\r\n        URL.createObjectURL(imageFileArr[0][i]),\r\n        createdTimeInMilisecs,\r\n      ]);\r\n    }\r\n\r\n    sortByDateTimeOriginal(images2DArray);\r\n    // console.log(\"Set image Array\");\r\n    setimageBlobArr(images2DArray); //  set the dynamic state array equal to the blobs we just made\r\n\r\n    if (imageBlobArr) {\r\n      // console.log(\"setImages state to True\");\r\n      setAreImagesLoaded(true);\r\n      setAreImagesUploaded(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledUploadBtnSection>\r\n      <div\r\n        className=\"container d-flex flex-row justify-content-center align-items-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <label className=\"btn-lg btn-danger\">\r\n          <div>Upload Images</div>\r\n          <input\r\n            id=\"inputFile\"\r\n            className=\"file-upload\"\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            onChange={loadImages}\r\n            multiple\r\n            autoFocus\r\n          />\r\n        </label>\r\n      </div>\r\n    </StyledUploadBtnSection>\r\n  );\r\n}\r\n\r\nconst StyledUploadBtnSection = styled.div`\r\n  h1 {\r\n    color: white;\r\n  }\r\n\r\n  // For the Upload Button, hides the input\r\n  .file-upload {\r\n    display: none;\r\n  }\r\n`;\r\n","import React, { createContext, useEffect, useState } from \"react\";\r\n\r\nexport const NavContext = createContext();\r\n\r\nexport function NavProvider(props) {\r\n  const [\r\n    numberOfSelectedImagesTotal,\r\n    setNumberOfSelectedImagesTotal,\r\n  ] = useState(0); // used for displaying the total number of selected images\r\n\r\n  // The images that have an orange check mark, saved in an array.\r\n  const [acceptedImageKeys, setAcceptedImageKeys] = useState([]);\r\n\r\n  // The clusters that we create, stored in a 2d array where each array is a new cluster [[new cluster], [new cluster]]\r\n  const [storedClusters, setStoredClusters] = useState([]);\r\n\r\n  // This is a string pointing to the image blob key which has been clicked, gives the image an orange outline\r\n  const [selectedImageKey, setSelectedImageKey] = useState();\r\n\r\n  // used for debugging\r\n  useEffect(() => {\r\n    // console.log(\"acceptedImageKeys\");\r\n    // console.log(acceptedImageKeys);\r\n    // console.log(\"storedClusters\");\r\n    // console.log(storedClusters);\r\n    // console.log(\"selectedImageKey: \");\r\n    // console.log(selectedImageKey);\r\n  }, [acceptedImageKeys, storedClusters, selectedImageKey]);\r\n\r\n  return (\r\n    <NavContext.Provider\r\n      value={{\r\n        numberOfSelectedImages: [\r\n          numberOfSelectedImagesTotal,\r\n          setNumberOfSelectedImagesTotal,\r\n        ],\r\n        globalAcceptedImages: [acceptedImageKeys, setAcceptedImageKeys],\r\n        globalyStoredClusters: [storedClusters, setStoredClusters],\r\n        globalSelectedImageKey: [selectedImageKey, setSelectedImageKey],\r\n      }}\r\n    >\r\n      {props.children}\r\n    </NavContext.Provider>\r\n  );\r\n}\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { NavContext } from \"./NavContext\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function Nav({ imageBlobArr }) {\r\n  const { numberOfSelectedImages, globalAcceptedImages } =\r\n    useContext(NavContext);\r\n\r\n  const [totalNumSelectedImages, setTotalNumSelectedImages] =\r\n    numberOfSelectedImages;\r\n\r\n  const [acceptedImageKeys, setAcceptedImageKeys] = globalAcceptedImages;\r\n\r\n  const [selectedImages, setSelectedImages] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setSelectedImages(totalNumSelectedImages);\r\n  }, [globalAcceptedImages]);\r\n\r\n  return (\r\n    <StyledNavSection>\r\n      <nav id=\"appNav\">\r\n        <p>\r\n          Accepted pictures: {totalNumSelectedImages} of {imageBlobArr.length}\r\n        </p>\r\n      </nav>\r\n    </StyledNavSection>\r\n  );\r\n}\r\n\r\nconst StyledNavSection = styled.nav`\r\n  nav {\r\n    color: #b9b9b9;\r\n    position: -webkit-sticky;\r\n    position: sticky;\r\n    top: 5px;\r\n    z-index: 100;\r\n  }\r\n\r\n  p {\r\n    margin: 5px 0 5px 20px;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport default function Loader() {\r\n  return (\r\n    <StyledLoaderSection>\r\n      <div\r\n        className=\"container d-flex flex-column justify-content-center align-items-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <div className=\"loader\"></div>\r\n\r\n        <h3>Please wait, the robot is thinking &#129302;</h3>\r\n      </div>\r\n    </StyledLoaderSection>\r\n  );\r\n}\r\n\r\n\r\nconst StyledLoaderSection = styled.section`\r\n  height: 100vh;\r\n\r\n  h3 {\r\n    color: white;\r\n    display: block;\r\n  }\r\n\r\n  .loader {\r\n    border: 16px solid #f3f3f3; /* Light grey */\r\n    border-top: 16px solid #414141; /* Blue */\r\n    border-radius: 50%;\r\n    width: 120px;\r\n    height: 120px;\r\n    animation: spin 2s linear infinite;\r\n    margin: 50px;\r\n  }\r\n\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { NavContext } from \"./NavContext\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function ImageCard(props) {\r\n  const [isSelected, setIsSelected] = useState(false);\r\n  const [isAccepted, setIsAccepted] = useState(false);\r\n  const {\r\n    numberOfSelectedImages,\r\n    globalAcceptedImages,\r\n    globalSelectedImageKey,\r\n  } = useContext(NavContext); // getting multiple states from the Nav Context\r\n  const [selectedImageKey, setSelectedImageKey] = globalSelectedImageKey;\r\n\r\n  const [\r\n    totalNumSelectedImages,\r\n    setTotalNumSelectedImages,\r\n  ] = numberOfSelectedImages;\r\n\r\n  const [acceptedImageKeys, setAcceptedImageKeys] = globalAcceptedImages;\r\n\r\n  // This checks on rerenders if the key of the image is in the global selected key array\r\n  useEffect(() => {\r\n    if (acceptedImageKeys.includes(props.blob)) {\r\n      // console.log('Key is in selected array, set selected state to true');\r\n      setIsAccepted(true);\r\n    } else {\r\n      // console.log('Key is not in selected array, set selected state to false');\r\n      setIsAccepted(false);\r\n    }\r\n    if (selectedImageKey === props.blob) {\r\n      setIsSelected(true);\r\n    } else {\r\n      setIsSelected(false);\r\n    }\r\n  }, [selectedImageKey]);\r\n\r\n  function acceptImage() {\r\n    if (isAccepted) {\r\n      props.setLlocalNumberOfSelectedImages((prev) => prev - 1);\r\n      setTotalNumSelectedImages((prev) => prev - 1);\r\n\r\n      // If an image is selected we want it to be deleted from the global selected image key array\r\n      // React likes states to not be directly changed so copy the global state array\r\n      const acceptedImageKeysCopy = [...acceptedImageKeys];\r\n      acceptedImageKeysCopy.splice(\r\n        acceptedImageKeysCopy.indexOf(props.blob),\r\n        1\r\n      ); // find the index of the key and delete it\r\n      setAcceptedImageKeys([...acceptedImageKeysCopy]); // set the state array to the new modified array\r\n    } else {\r\n      props.setLlocalNumberOfSelectedImages((prev) => prev + 1);\r\n      setTotalNumSelectedImages((prev) => prev + 1);\r\n\r\n      // the image key doesnt exist in the global image selected key array\r\n      // make a copy of the global array\r\n      const acceptedImageKeysCopy = [...acceptedImageKeys];\r\n      acceptedImageKeysCopy.push(props.blob); // add the key of the selected image\r\n      setAcceptedImageKeys([...acceptedImageKeysCopy]); // set the state to the modified array\r\n    }\r\n    return setIsAccepted(!isAccepted);\r\n  }\r\n\r\n  function handleSelected(e) {\r\n    setSelectedImageKey(e.target.src);\r\n  }\r\n\r\n  const rejected = (\r\n    <svg\r\n      id=\"Component_4_33\"\r\n      data-name=\"Component 4 – 33\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width=\"19\"\r\n      height=\"17\"\r\n      viewBox=\"0 0 19 17\"\r\n      onClick={acceptImage}\r\n    >\r\n      <rect\r\n        id=\"Rectangle_97\"\r\n        data-name=\"Rectangle 97\"\r\n        width=\"19\"\r\n        height=\"17\"\r\n        fill=\"#be171c\"\r\n      />\r\n      <g id=\"Group_20\" data-name=\"Group 20\" transform=\"translate(3.915 2.959)\">\r\n        <path\r\n          id=\"Path_36\"\r\n          data-name=\"Path 36\"\r\n          d=\"M-5800.456,4404.347l-11.182,11.01\"\r\n          transform=\"translate(5811.638 -4404.347)\"\r\n          fill=\"none\"\r\n          stroke=\"#181818\"\r\n          strokeWidth=\"2\"\r\n        />\r\n        <path\r\n          id=\"Path_37\"\r\n          data-name=\"Path 37\"\r\n          d=\"M-5811.638,4404.347l10.93,11.083\"\r\n          transform=\"translate(5811.638 -4404.347)\"\r\n          fill=\"none\"\r\n          stroke=\"#181818\"\r\n          strokeWidth=\"2\"\r\n        />\r\n      </g>\r\n    </svg>\r\n  );\r\n\r\n  const accepted = (\r\n    <svg\r\n      id=\"Component_3_9\"\r\n      data-name=\"Component 3 – 9\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width=\"19\"\r\n      height=\"17\"\r\n      viewBox=\"0 0 19 17\"\r\n      onClick={acceptImage}\r\n    >\r\n      <g\r\n        id=\"Rectangle_95\"\r\n        data-name=\"Rectangle 95\"\r\n        fill=\"#fe8029\"\r\n        stroke=\"#fe8029\"\r\n        strokeWidth=\"1\"\r\n      >\r\n        <rect width=\"19\" height=\"17\" stroke=\"none\" />\r\n        <rect x=\"0.5\" y=\"0.5\" width=\"18\" height=\"16\" fill=\"none\" />\r\n      </g>\r\n      <path\r\n        id=\"Path_30\"\r\n        data-name=\"Path 30\"\r\n        d=\"M105.618,1053.058l4.275,4.1,7.391-9.832\"\r\n        transform=\"translate(-101.724 -1044.227)\"\r\n        fill=\"none\"\r\n        stroke=\"#181818\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth=\"2\"\r\n      />\r\n    </svg>\r\n  );\r\n\r\n  return (\r\n    <StyledImageCardSection isFullscreen={props.isFullScreen}>\r\n      <StyledImageContainer\r\n        className={\"card\" + (isSelected ? \" cardSelected\" : \"\")}\r\n        isSelected={isSelected}\r\n      >\r\n        <StyledImage\r\n          key={props.blob}\r\n          src={props.blob}\r\n          alt=\"\"\r\n          onClick={handleSelected}\r\n          //isSelected={isSelected}\r\n        ></StyledImage>\r\n      </StyledImageContainer>\r\n      <span style={{ textAlign: \"center\" }}>\r\n        {isAccepted ? accepted : rejected}\r\n      </span>\r\n    </StyledImageCardSection>\r\n  );\r\n}\r\n\r\nconst StyledImageContainer = styled.div`\r\n  width: 97%;\r\n  height: 80%;\r\n  margin-top: 5px;\r\n  background-color: #181818;\r\n`;\r\n\r\nconst StyledImageCardSection = styled.section`\r\n  min-width: 14%;\r\n  min-height: 10%;\r\n  max-width: 14%;\r\n  max-height: 10%;\r\n  margin-left: 2%;\r\n  border: none;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 1%;\r\n\r\n  ${(props) =>\r\n    props.isFullscreen &&\r\n    `\r\n    min-width: 10em;\r\n    max-width: 12em;\r\n`}\r\n\r\n  .card-img-top {\r\n    width: auto;\r\n    height: 15vh;\r\n    object-fit: contain;\r\n  }\r\n\r\n  .card {\r\n    border: none;\r\n  }\r\n\r\n  .card-body {\r\n    width: 100%;\r\n    height: 20%;\r\n    text-align: center;\r\n    background-color: #282828;\r\n    padding: 0px 0px 0px 0px;\r\n  }\r\n\r\n  .cardAccepted {\r\n    box-shadow: 0px 0px 10px 7px var(--selected-image-color);\r\n  }\r\n\r\n  .cardSelected {\r\n    box-shadow: 0px 0px 8px 5px rgb(180, 180, 180);\r\n  }\r\n`;\r\n\r\nconst StyledImage = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: contain;\r\n  ${(props) =>\r\n    props.isSelected &&\r\n    `\r\n  //box-shadow: 0px 0px 5px 3px rgb(110, 110, 110);\r\n  border: 5px;\r\n  border-color: #A8A8A8;\r\n  border-radius: 4px;\r\n`}\r\n`;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { NavContext } from \"./NavContext\";\r\nimport ImageCard from \"./ImageCard\";\r\nimport { all } from \"@tensorflow/tfjs\";\r\nimport styled from \"styled-components\";\r\n\r\n// import tensorflow\r\nconst tf = require(\"@tensorflow/tfjs\");\r\n\r\nexport default function Cluster({ imageBlobArr, isFullScreen }) {\r\n  // Global variables\r\n  const { globalyStoredClusters, numberOfSelectedImages } =\r\n    useContext(NavContext);\r\n  const [storedClusters, setStoredClusters] = globalyStoredClusters;\r\n  const [numberOfSelectedImagesTotal, setNumberOfSelectedImagesTotal] =\r\n    numberOfSelectedImages;\r\n\r\n  // local variables\r\n  const [localNumberOfSelectedImages, setLlocalNumberOfSelectedImages] =\r\n    useState(0);\r\n  const { globalAcceptedImages } = useContext(NavContext);\r\n  const [acceptedImagesKeys, setAcceptedImagesKeys] = globalAcceptedImages;\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  // const [clusterModel, setClusterModel] = useState();\r\n\r\n  const clustersArray = [];\r\n\r\n  // checks if any of the images in the cluster are in the global selected images array and modify the counter state based on it\r\n  useEffect(() => {\r\n    imageBlobArr.map((blob, index) => {\r\n      if (\r\n        !isFullScreen &&\r\n        index === 0 &&\r\n        !acceptedImagesKeys.includes(blob[0])\r\n      ) {\r\n        const copy = acceptedImagesKeys;\r\n        copy.push(blob[0]);\r\n        setAcceptedImagesKeys(copy);\r\n        setNumberOfSelectedImagesTotal((prev) => prev + 1);\r\n      }\r\n      clustersArray.push(blob[0]);\r\n      if (acceptedImagesKeys.includes(blob[0])) {\r\n        setLlocalNumberOfSelectedImages((prev) => (prev += 1));\r\n      }\r\n    });\r\n\r\n    if (\r\n      !storedClusters.some((elements) =>\r\n        elements.some((element) => clustersArray.includes(element))\r\n      ) &&\r\n      !isFullScreen\r\n    ) {\r\n      console.log(\"New Cluster added to the global array\");\r\n      // get a copy of the clusters array\r\n      const copy = storedClusters;\r\n      copy.push(clustersArray); // add the cluster array to the copy of the global array\r\n      setStoredClusters(copy); // set the global array to the modified cluster array\r\n    }\r\n\r\n    // const fetchModel = async () => {\r\n    //   const model = await tf.loadLayersModel(\r\n    //     \"http://localhost:8000/model.json\"\r\n    //   );\r\n    //   setClusterModel(model);\r\n    //   console.log(\"Model: \" + clusterModel);\r\n    // };\r\n    // fetchModel();\r\n  }, []);\r\n\r\n  const imageCards = imageBlobArr.map((blob) => {\r\n    return (\r\n      <ImageCard\r\n        key={blob}\r\n        blob={isFullScreen ? blob : blob[0]}\r\n        setLlocalNumberOfSelectedImages={setLlocalNumberOfSelectedImages}\r\n        isFullScreen={isFullScreen ? true : false}\r\n      />\r\n    );\r\n  });\r\n\r\n  if (isFullScreen) {\r\n    return (\r\n      <StyledFullscreenClusterContainer className=\"clustersPanel\">\r\n        {imageCards}\r\n      </StyledFullscreenClusterContainer>\r\n    );\r\n  } else {\r\n    return (\r\n      <StyledRowContainer isOpen={isOpen}>\r\n        <StyledColumnContainer>\r\n          <StyledSelectedText>\r\n            {localNumberOfSelectedImages} / {imageBlobArr.length}\r\n          </StyledSelectedText>\r\n          <StyledOpenButton onClick={() => setIsOpen((prev) => !prev)}>\r\n            {isOpen ? arrowOpen : arrowClosed}\r\n          </StyledOpenButton>\r\n        </StyledColumnContainer>\r\n        <StyledClusterContainer isOpen={isOpen}>\r\n          {imageCards}\r\n        </StyledClusterContainer>\r\n      </StyledRowContainer>\r\n    );\r\n  }\r\n}\r\n\r\nconst arrowOpen = (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"22.644\"\r\n    height=\"13.443\"\r\n    viewBox=\"0 0 22.644 13.443\"\r\n  >\r\n    <path\r\n      id=\"Path_45\"\r\n      data-name=\"Path 45\"\r\n      d=\"M-4098,3547.375l10.261,10.261,10.261-10.261\"\r\n      transform=\"translate(4099.061 -3546.315)\"\r\n      fill=\"none\"\r\n      stroke=\"#fe8029\"\r\n      strokeWidth=\"3\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nconst arrowClosed = (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"13.443\"\r\n    height=\"22.644\"\r\n    viewBox=\"0 0 13.443 22.644\"\r\n  >\r\n    <path\r\n      id=\"Path_49\"\r\n      data-name=\"Path 49\"\r\n      d=\"M-4098,3547.375l10.261,10.261,10.261-10.261\"\r\n      transform=\"translate(-3546.315 -4076.417) rotate(-90)\"\r\n      fill=\"none\"\r\n      stroke=\"#fe8029\"\r\n      strokeWidth=\"3\"\r\n    />\r\n  </svg>\r\n);\r\n\r\n// styled components\r\n\r\nconst StyledClusterContainer = styled.div`\r\n  display: flex !important;\r\n  flex-direction: row;\r\n  flex-wrap: nowrap;\r\n  flex: 3;\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n  object-fit: contain;\r\n  //asdasd\r\n  height: fit-content;\r\n  ::-webkit-scrollbar {\r\n    scrollbar-width: thin;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    `\r\nflex-wrap: wrap\r\n\r\n`}\r\n`;\r\n\r\nconst StyledColumnContainer = styled.div`\r\n  min-width: 5%;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst StyledRowContainer = styled.div`\r\n  background: #282828;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex: 3;\r\n  width: 100%;\r\n  height: fit-content;\r\n  margin-bottom: 0.3%;\r\n  overflow-y: auto;\r\n  overflow-x: auto;\r\n`;\r\n\r\nconst StyledSelectedText = styled.p`\r\n  color: white;\r\n`;\r\n\r\nconst StyledOpenButton = styled.button`\r\n  background-color: transparent;\r\n  border: none;\r\n  padding-top: 25%;\r\n`;\r\n\r\n// const StyledFullscreenRowContainer = styled.div`\r\n//   background: #282828;\r\n//   display: flex;\r\n//   flex-direction: row;\r\n//   width: 100%;\r\n//   min-height: 140px;\r\n//   max-height: 140px;\r\n//   margin-bottom: 5px;\r\n//   overflow-y: auto;\r\n//   overflow-x: hidden;\r\n// `;\r\n\r\nconst StyledFullscreenClusterContainer = styled.div`\r\n  display: flex !important;\r\n  flex-direction: row;\r\n  flex-wrap: nowrap;\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    `\r\nflex-wrap: wrap\r\n\r\n`}\r\n`;\r\n\r\n// const StyledHorizClusterSection = styled.section`\r\n//   .scrollMenu {\r\n//     overflow-x: scroll;\r\n//     overflow-y: hidden;\r\n//     white-space: nowrap;\r\n//   }\r\n\r\n//   .clusterNum {\r\n//     position: -webkit-sticky;\r\n//     position: sticky;\r\n//     left: 0px;\r\n//   }\r\n\r\n//   * {\r\n//     scrollbar-width: thin;\r\n//     scrollbar-color: rgba(155, 155, 155, 0.5) transparent;\r\n//   }\r\n//   ::-webkit-scrollbar {\r\n//     width: 5px;\r\n//   }\r\n//   ::-webkit-scrollbar-track {\r\n//     background: transparent;\r\n//   }\r\n//   ::-webkit-scrollbar-thumb {\r\n//     color: rgba(155, 155, 155, 0.5);\r\n//     border-radius: 20px;\r\n//     border: transparent;\r\n//   }\r\n// `;\r\n","import { useContext } from \"react\";\r\nimport Cluster from \"./Cluster\";\r\nimport { NavContext } from \"./NavContext\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function Clusters(props) {\r\n  // local values\r\n  const clusterArray = [[]];\r\n  var prevClusterIndex = 0;\r\n  var clusterNum = 0;\r\n  var interval = 2800; //change this number to tweak the clustering\r\n\r\n  var prevDateTimeOriginal = null;\r\n\r\n  // imageblobarr = [[Blob, lastModifiedInMilisecs]]\r\n  // element = [Blob, lastModifiedInMilisecs]\r\n  return props.imageBlobArr.map((element, index) => {\r\n    // if our PrevlasMod is not set set it to the first elements lastMod, we can do this cuz the array is sorted\r\n    if (prevDateTimeOriginal === null) {\r\n      prevDateTimeOriginal = element[1];\r\n    }\r\n\r\n    //check if the image creation date is within the interval compared to the previous image\r\n    if (\r\n      Math.abs(element[1] - prevDateTimeOriginal) > interval ||\r\n      index === props.imageBlobArr.length - 1\r\n    ) {\r\n      // the image element is not within the threshold so make a new cluster\r\n      if (index === props.imageBlobArr.length - 1) {\r\n        clusterArray.push([prevClusterIndex, index + 1]);\r\n      } else {\r\n        clusterArray.push([prevClusterIndex, index]);\r\n      }\r\n      prevClusterIndex = index;\r\n      clusterNum++;\r\n      prevDateTimeOriginal = element[1];\r\n\r\n      const newCluster = props.imageBlobArr.slice(\r\n        clusterArray[clusterNum][0],\r\n        clusterArray[clusterNum][1]\r\n      );\r\n\r\n      return (\r\n          <Cluster\r\n            id=\"cluster\"\r\n            key={clusterNum}\r\n            imageBlobArr={newCluster}\r\n            isFullScreen={props.isFullScreen}\r\n          />\r\n\r\n      );\r\n    } else {\r\n      prevDateTimeOriginal = element[1];\r\n    }\r\n  });\r\n}\r\n\r\n// get the images into a prop for the individual clusters\r\n\r\nconst StyledClustersSection = styled.section`\r\n  * {\r\n    scrollbar-width: thin;\r\n    scrollbar-color: rgba(155, 155, 155, 0.5) transparent;\r\n  }\r\n  ::-webkit-scrollbar {\r\n    width: 2px;\r\n  }\r\n  ::-webkit-scrollbar-track {\r\n    background: transparent;\r\n  }\r\n  ::-webkit-scrollbar-thumb {\r\n    color: rgba(155, 155, 155, 0.5);\r\n    border-radius: 20px;\r\n    border: transparent;\r\n  }\r\n\r\n  .scrollMenu {\r\n    overflow-x: scroll;\r\n    overflow-y: hidden;\r\n    white-space: nowrap;\r\n  }\r\n`;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { NavContext } from \"./NavContext\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function Cluster({ index, setOffset }) {\r\n  const { globalyStoredClusters } = useContext(NavContext);\r\n  const [storedClusters, setStoredClusters] = globalyStoredClusters;\r\n  let prevClusterIndex = index - 1;\r\n  let currentClusterIndex = index;\r\n  let nextClusterIndex = index + 1;\r\n\r\n  if (currentClusterIndex === 0) {\r\n    prevClusterIndex = storedClusters.length - 1;\r\n  }\r\n\r\n  if (currentClusterIndex === storedClusters.length - 1) {\r\n    nextClusterIndex = 0;\r\n  }\r\n\r\n  return (\r\n    <StyledVertClusterSection className=\"grid-item d-flex flex-column vertical-cluster\">\r\n      {/* Replace index with the index of the cluster */}\r\n\r\n      <div className=\"card top-bottom-imgs\">\r\n        <img\r\n          className=\"smallCluster\"\r\n          src={storedClusters[prevClusterIndex][0]}\r\n          alt=\"\"\r\n          onClick={() => setOffset(-1)}\r\n        />\r\n        <div className=\"overlay\">{storedClusters[prevClusterIndex].length}</div>\r\n      </div>\r\n      <div className=\"card middle-img\">\r\n        <img className=\"bigCluster\" src={storedClusters[index][0]} alt=\"\" />\r\n        <div className=\"bigOverlay\">\r\n          {storedClusters[currentClusterIndex].length}\r\n        </div>\r\n      </div>\r\n      <div className=\"card top-bottom-imgs\">\r\n        <img\r\n          className=\"smallCluster\"\r\n          src={storedClusters[nextClusterIndex][0]}\r\n          alt=\"\"\r\n          onClick={() => setOffset(+1)}\r\n        />\r\n        <div className=\"overlay\">{storedClusters[nextClusterIndex].length}</div>\r\n      </div>\r\n      {/* Use the classNames for styling the image previews */}\r\n    </StyledVertClusterSection>\r\n  );\r\n}\r\n\r\nconst StyledVertClusterSection = styled.section`\r\n  .top-bottom-imgs {\r\n    background-color: transparent;\r\n  }\r\n\r\n  .smallCluster {\r\n    object-fit: contain;\r\n    height: 100%;\r\n    width: 12rem;\r\n  }\r\n  .bigCluster {\r\n    object-fit: contain;\r\n    height: 100%;\r\n    width: 15rem;\r\n    outline-width: 0.13em;\r\n    outline-color: white;\r\n    outline-style: solid;\r\n  }\r\n  .overlay {\r\n    position: absolute;\r\n    min-width: 1%;\r\n    max-width: 100%;\r\n    bottom: 0%;\r\n    background: rgba(0, 0, 0, 0.6); /* Black see-through */\r\n    width: 1%;\r\n    height: 1%;\r\n    color: white;\r\n    font-size: 20px;\r\n    padding: 0em 1em 1.5em 0.4em;\r\n    text-align: left;\r\n  }\r\n  .bigOverlay {\r\n    position: absolute;\r\n    min-width: 1%;\r\n    max-width: 100%;\r\n    bottom: 0%;\r\n    background: rgba(0, 0, 0, 0.6); /* Black see-through */\r\n    width: 1%;\r\n    height: 1%;\r\n    color: white;\r\n    font-size: 20px;\r\n    padding: 0em 1em 1.5em 0.4em;\r\n    text-align: left;\r\n  }\r\n`;\r\n","import { useContext, useEffect, useState } from \"react\";\r\n\r\n// components\r\nimport VerticalCluster from \"./VerticalCluster\";\r\nimport Cluster from \"./Cluster\";\r\nimport { NavContext } from \"./NavContext\";\r\n\r\n// styles\r\nimport styled from \"styled-components\";\r\n\r\nexport default function FullscreenView() {\r\n  //states\r\n\r\n  const {\r\n    globalyStoredClusters,\r\n    globalSelectedImageKey,\r\n    globalAcceptedImages,\r\n  } = useContext(NavContext);\r\n  const [storedClusters, setStoredClusters] = globalyStoredClusters;\r\n  const [selectedImageKey, setSelectedImageKey] = globalSelectedImageKey;\r\n  const [acceptedImageKeys, setAcceptedImageKeys] = globalAcceptedImages;\r\n\r\n  // local state\r\n  const [clusterIndex, setClusterIndex] = useState(\r\n    storedClusters.findIndex((element) => element.includes(selectedImageKey))\r\n  );\r\n\r\n  const [acceptedClustersImages, setAcceptedClustersImages] = useState(\r\n    storedClusters[clusterIndex].filter((element) => {\r\n      return acceptedImageKeys.find((e) => e === element);\r\n    })\r\n  );\r\n  const [nonAcceptedClustersImages, setNonAcceptedClustersImages] = useState(\r\n    storedClusters[clusterIndex].filter((element) => {\r\n      return !acceptedImageKeys.includes(element);\r\n    })\r\n  );\r\n\r\n  function changeOffset(direction) {\r\n    if (clusterIndex + direction >= storedClusters.length - 1) {\r\n      return setClusterIndex(0);\r\n    }\r\n    if (clusterIndex + direction <= 0) {\r\n      return setClusterIndex(storedClusters.length - 1);\r\n    }\r\n    setClusterIndex((prev) => (prev += direction));\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Set the accepted blob array bt filtering the current cluster array\r\n    // then find the new instance of blob key that matches the accepted key\r\n    setAcceptedClustersImages(\r\n      storedClusters[clusterIndex].filter((element) => {\r\n        return acceptedImageKeys.find((e) => e === element);\r\n      })\r\n    );\r\n\r\n    // set the blob array to only include non accepted images\r\n    // this is done by checking the current cluster array and filtering by excluding the acceptedKey blobs\r\n    setNonAcceptedClustersImages(\r\n      storedClusters[clusterIndex].filter((element) => {\r\n        return !acceptedImageKeys.includes(element);\r\n      })\r\n    );\r\n  }, [acceptedImageKeys, clusterIndex]);\r\n\r\n  return (\r\n    <StyledFullscreenSection id=\"fullscreenView\">\r\n      <div className=\"vertical-cluster\">\r\n        <h1>\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            height=\"24px\"\r\n            viewBox=\"0 0 24 24\"\r\n            width=\"24px\"\r\n            fill=\"#b9b9b9\"\r\n          >\r\n            <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n            <path d=\"M11.99 18.54l-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27-7.38 5.74zM12 16l7.36-5.73L21 9l-9-7-9 7 1.63 1.27L12 16z\" />\r\n          </svg>\r\n          Clusters\r\n        </h1>\r\n        <VerticalCluster index={clusterIndex} setOffset={changeOffset} />\r\n      </div>\r\n\r\n      <div className=\"bigImageContainer grid-item\">\r\n        `\r\n        <img\r\n          className=\"bigImage\"\r\n          src={\r\n            storedClusters[clusterIndex].includes(selectedImageKey)\r\n              ? selectedImageKey\r\n              : storedClusters[clusterIndex][0]\r\n          }\r\n          alt=\"\"\r\n        />\r\n        `\r\n        <ul className=\"bigImageMetadata\">\r\n          <li> ISO 1500</li>\r\n          <li> 1/250</li>\r\n          <li> f/5.6</li>\r\n          <li> rejected-3.jpg </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"bigImageInfo\">\r\n        <h1>\r\n          <svg\r\n            className=\"icon\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"26.858\"\r\n            height=\"26.858\"\r\n            viewBox=\"0 0 26.858 26.858\"\r\n          >\r\n            <g\r\n              id=\"Group_21\"\r\n              data-name=\"Group 21\"\r\n              transform=\"translate(-74.801 -74.811)\"\r\n            >\r\n              <path\r\n                id=\"Path_38\"\r\n                data-name=\"Path 38\"\r\n                d=\"M168.271,155.12H156.923a1.8,1.8,0,0,0-1.8,1.8v11.349a1.8,1.8,0,0,0,1.8,1.8h11.349a1.8,1.8,0,0,0,1.8-1.8V156.922A1.8,1.8,0,0,0,168.271,155.12Zm.811,13.151a.815.815,0,0,1-.811.811H156.923a.815.815,0,0,1-.811-.811V156.922a.815.815,0,0,1,.811-.811h11.349a.815.815,0,0,1,.811.811Z\"\r\n                transform=\"translate(-74.366 -74.357)\"\r\n                fill=\"#b9b9b9\"\r\n              />\r\n              <path\r\n                id=\"Path_41\"\r\n                data-name=\"Path 41\"\r\n                d=\"M101.146,86.615a.5.5,0,1,0,0-.992H98.168V82.375h2.977a.5.5,0,1,0,0-.992H98.127a3.472,3.472,0,0,0-3.039-3.039V75.326a.5.5,0,0,0-.992,0V78.3h-3.25V75.326a.5.5,0,1,0-.991-.038c0,.013,0,.026,0,.038V78.3H86.606V75.326a.5.5,0,1,0-.991-.038c0,.013,0,.026,0,.038V78.3H82.366V75.326a.5.5,0,0,0-.992,0v3.017a3.472,3.472,0,0,0-3.039,3.039h-3.02a.5.5,0,1,0,0,.992h2.977v3.25H75.316a.5.5,0,1,0,0,.992h2.977v3.249H75.316a.5.5,0,1,0,0,.992h2.977V94.1H75.316a.5.5,0,1,0-.038.991h3.057a3.471,3.471,0,0,0,3.039,3.039v3.018a.5.5,0,0,0,.992,0V98.178h3.249v2.977a.5.5,0,1,0,.991.038c0-.013,0-.026,0-.038V98.178h3.249v2.977a.5.5,0,1,0,.991.038c0-.013,0-.026,0-.038V98.178h3.249v2.977a.5.5,0,0,0,.992,0V98.136A3.471,3.471,0,0,0,98.125,95.1h3.019a.5.5,0,1,0,.038-.991H98.168V90.856h2.977a.5.5,0,1,0,0-.992H98.168V86.615Zm-3.968,8.073a2.5,2.5,0,0,1-2.5,2.5h-12.9a2.5,2.5,0,0,1-2.5-2.5v-12.9a2.5,2.5,0,0,1,2.5-2.5h12.9a2.5,2.5,0,0,1,2.5,2.5Z\"\r\n                transform=\"translate(0 0)\"\r\n                fill=\"#b9b9b9\"\r\n              />\r\n              <text\r\n                id=\"AI\"\r\n                transform=\"translate(88.281 90.811)\"\r\n                fill=\"#b9b9b9\"\r\n                font-size=\"9\"\r\n                font-family=\"Helvetica\"\r\n                letter-spacing=\"-0.02em\"\r\n              >\r\n                <tspan x=\"-4.162\" y=\"0\">\r\n                  AI\r\n                </tspan>\r\n              </text>\r\n            </g>\r\n          </svg>\r\n          Auto Culling\r\n        </h1>\r\n        <ul className=\"aiList\">\r\n          <li>\r\n            {\" \"}\r\n            Confidence <span className=\"nothingness\">\r\n              {\" \"}\r\n              nothingnessssss{\" \"}\r\n            </span>{\" \"}\r\n            38%\r\n          </li>\r\n          <li>\r\n            {\" \"}\r\n            Images accepted <span className=\"nothingness\"> nothingns </span> 38%\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <div className=\"acceptedDiv\">\r\n        <h1>Accepted</h1>\r\n        <Cluster\r\n          className=\"accepted\"\r\n          imageBlobArr={acceptedClustersImages}\r\n          isAcceptedCluster={true}\r\n          isFullScreen={true}\r\n        />\r\n      </div>\r\n      <div className=\"rejectedDiv\">\r\n        <h1>Rejected</h1>\r\n        <Cluster\r\n          className=\"rejected\"\r\n          imageBlobArr={nonAcceptedClustersImages}\r\n          isFullScreen={true}\r\n          isAcceptedCluster={true}\r\n        />\r\n      </div>\r\n    </StyledFullscreenSection>\r\n  );\r\n}\r\n\r\nconst StyledFullscreenSection = styled.section`\r\n  background-color: #0d0d0d;\r\n  margin: 0 !important;\r\n  display: grid;\r\n  height: 100vh;\r\n  grid-template-columns: 0.65fr 0.5fr 1.5fr 1.5fr;\r\n  grid-template-rows: 1.8fr 0.71fr 1fr;\r\n  gap: 0.1em 0.1em;\r\n\r\n  grid-template-areas:\r\n    \"verticalCluster bigImageContainer bigImageContainer bigImageContainer\"\r\n    \"bigImageInfo bigImageContainer bigImageContainer bigImageContainer\"\r\n    \"acceptedDiv acceptedDiv rejectedDiv rejectedDiv\";\r\n\r\n  .bigImageInfo {\r\n    color: white;\r\n    grid-area: bigImageInfo;\r\n    background-color: #282828;\r\n    margin-bottom: 0.3em;\r\n    margin-top: 0.3em;\r\n  }\r\n\r\n  .vertical-cluster {\r\n    grid-area: verticalCluster;\r\n    align-items: center;\r\n    background-color: #282828;\r\n    h1 {\r\n      padding-top: 0.5rem;\r\n    }\r\n  }\r\n\r\n  .bigImageContainer {\r\n    grid-area: bigImageContainer;\r\n    align-items: center;\r\n    margin: 2em 3em 3em 18em;\r\n    overflow-y: hidden;\r\n  }\r\n\r\n  /* .clustersPanel{\r\n    min-height: fit-content;\r\n  } */\r\n\r\n  .acceptedDiv {\r\n    grid-area: acceptedDiv;\r\n    background-color: #282828;\r\n    margin-right: 0.3rem;\r\n  }\r\n  .rejectedDiv {\r\n    grid-area: rejectedDiv;\r\n    background-color: #282828;\r\n  }\r\n\r\n  .card {\r\n    background-color: transparent;\r\n    margin: 0.6em;\r\n  }\r\n\r\n  .middle-img {\r\n    height: 100%;\r\n    width: 15rem;\r\n  }\r\n\r\n  .bigImage {\r\n    height: 100%;\r\n    object-fit: contain;\r\n  }\r\n\r\n  .bigImageMetadata {\r\n    top: 80%;\r\n    padding-left: 15px;\r\n    list-style-type: none;\r\n    text-align: center;\r\n    margin: 0;\r\n  }\r\n\r\n  .bigImageMetadata li {\r\n    display: inline-block;\r\n    font-size: 10px;\r\n    color: #a8a8a8;\r\n    padding: 0 20% 0 0;\r\n    margin-top: 0;\r\n  }\r\n\r\n  /* other elements */\r\n\r\n  h1 {\r\n    font-size: 20px;\r\n    font-weight: normal;\r\n    padding-left: 10px;\r\n    padding-top: 0.2em;\r\n    color: #b9b9b9;\r\n  }\r\n\r\n  .icon {\r\n    padding-right: 10px;\r\n  }\r\n\r\n  .aiList {\r\n    list-style-type: none;\r\n    color: #b9b9b9;\r\n  }\r\n\r\n  .nothingness {\r\n    color: transparent;\r\n  }\r\n`;\r\n","import { useState, useContext, useEffect } from \"react\";\r\nimport { NavContext } from \"./NavContext\";\r\n\r\n// components\r\nimport Clusters from \"./Clusters\";\r\nimport FullscreenView from \"./FullscreenView\";\r\n\r\n// styles\r\nimport styled from \"styled-components\";\r\n\r\nvar JSZip = require(\"jszip\");\r\n\r\nvar i = 0;\r\nvar ii = 0;\r\nvar fullscreen = false;\r\ndocument.body.style.overflow = \"hidden\";\r\n\r\nfunction applyFullscreenSettings() {\r\n  document.getElementById(\"appNav\").style.display = \"none\";\r\n}\r\n\r\nfunction applyNetflixSettings() {\r\n  document.getElementById(\"appNav\").style.display = \"block\";\r\n}\r\n\r\nexport default function CullingView({ imageBlobArr }) {\r\n  const {\r\n    globalyStoredClusters,\r\n    globalSelectedImageKey,\r\n    globalAcceptedImages,\r\n  } = useContext(NavContext); // getting multiple states from the Nav Context\r\n  const [selectedImageKey, setSelectedImageKey] = globalSelectedImageKey;\r\n  const [storedClusters, setStoredClusters] = globalyStoredClusters;\r\n  const [acceptedImageKeys, setAcceptedImageKeys] = globalAcceptedImages;\r\n\r\n  const [isFullScreen, setIsFullScreen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log(\"CullingView UseEffect\");\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    setSelectedImageKey(storedClusters[ii][0]);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  }, []);\r\n\r\n  function applyFullscreenSettings() {\r\n    document.getElementById(\"appNav\").style.display = \"none\";\r\n    document.body.style.overflow = \"hidden\";\r\n  }\r\n\r\n  function applyNetflixSettings() {\r\n    document.getElementById(\"appNav\").style.display = \"block\";\r\n    document.body.style.overflow = \"scroll\";\r\n  }\r\n\r\n  // some minor bug here but not too bad\r\n  function changeOffset(direction) {\r\n    if (ii + direction > storedClusters.length - 1) {\r\n      // ii = 0;\r\n      // return setSelectedImageKey(storedClusters[ii][0]);\r\n      return;\r\n    }\r\n    if (ii + direction < 0) {\r\n      // ii = storedClusters.length - 1;\r\n      // return setSelectedImageKey(storedClusters[ii][0]);\r\n      return;\r\n    }\r\n    ii += direction;\r\n    setSelectedImageKey(storedClusters[ii][0]);\r\n    let selectedCard = document.querySelector(\".cardSelected\");\r\n    selectedCard.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\r\n  }\r\n\r\n  function handleKeyDown(e) {\r\n    e.preventDefault();\r\n    switch (e.key) {\r\n      case \"f\":\r\n        fullscreen = true;\r\n        setIsFullScreen(true);\r\n        applyFullscreenSettings();\r\n        break;\r\n      case \"Escape\":\r\n        fullscreen = false;\r\n        setIsFullScreen(false);\r\n        applyNetflixSettings();\r\n        break;\r\n\r\n      // Cluster controlls withe keyboard\r\n      case \"ArrowDown\":\r\n        if (fullscreen) {\r\n          return;\r\n        }\r\n        changeOffset(1);\r\n        break;\r\n      case \"ArrowUp\":\r\n        if (fullscreen) {\r\n          return;\r\n        }\r\n        changeOffset(-1);\r\n        break;\r\n      case \"ArrowLeft\":\r\n        if (i - 1 < 0) return;\r\n        i -= 1;\r\n        try {\r\n          setSelectedImageKey(storedClusters[ii][i]);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n        break;\r\n      case \"ArrowRight\":\r\n        if (i + 1 > storedClusters[ii].length - 1) return;\r\n        i += 1;\r\n        try {\r\n          setSelectedImageKey(storedClusters[ii][i]);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const netflix = (\r\n    <StyledNetflixSection>\r\n      <Clusters imageBlobArr={imageBlobArr} isFullScreen={false} />\r\n    </StyledNetflixSection>\r\n  );\r\n\r\n  return <>{isFullScreen ? <FullscreenView /> : netflix}</>;\r\n}\r\n\r\nconst StyledNetflixSection = styled.section`\r\n  display: grid;\r\n  overflow: hidden;\r\n\r\n  .scrollMenu {\r\n    height: 20rem;\r\n  }\r\n  .card {\r\n    min-width: 84%;\r\n    min-height: 84%;\r\n    max-width: 100%;\r\n    max-height: 84%;\r\n    text-align: center;\r\n  }\r\n\r\n  .eWeylI {\r\n    color: #b9b9b9;\r\n  }\r\n\r\n  //this is weird, everything works except the width of the scrollbar, i don't have time to look into it.\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 5px;\r\n  }\r\n\r\n  /* Track */\r\n  ::-webkit-scrollbar-track {\r\n    //box-shadow: inset 0 0 5px grey;\r\n    border-radius: 10px;\r\n  }\r\n\r\n  /* Handle */\r\n  ::-webkit-scrollbar-thumb {\r\n    background: grey;\r\n    border-radius: 10px;\r\n  }\r\n\r\n  /* Handle on hover */\r\n  ::-webkit-scrollbar-thumb:hover {\r\n    background: #fe8029;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// Components\r\nimport ImageUploadBtn from \"./Components/ImageUploadBtn\";\r\nimport Nav from \"./Components/Nav\";\r\nimport { NavProvider } from \"./Components/NavContext\";\r\nimport Loader from \"./Components/Loader\";\r\nimport CullingView from \"./Components/CullingView\";\r\n\r\nexport default function App() {\r\n  const [imageBlobArr, setimageBlobArr] = useState([]);\r\n\r\n  // Has the user uploaded any images by clicking the upload button\r\n  const [areImagesUploaded, setAreImagesUploaded] = useState(false);\r\n\r\n  // has the images been loaded and and fetched the meta data\r\n  const [areImagesLoaded, setAreImagesLoaded] = useState(false);\r\n\r\n  // check if we need to show the loading icon or the upload button\r\n  var uploadBtn;\r\n  if (areImagesUploaded) {\r\n    uploadBtn = <Loader />;\r\n  } else {\r\n    uploadBtn = (\r\n      <ImageUploadBtn\r\n        imageBlobArr={imageBlobArr}\r\n        setimageBlobArr={setimageBlobArr}\r\n        setAreImagesUploaded={setAreImagesUploaded}\r\n        setAreImagesLoaded={setAreImagesLoaded}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <StyledAppSection>\r\n      {/* While the images have not been processed display either the upload btn or the loading page */}\r\n      {!areImagesLoaded && uploadBtn}\r\n\r\n      {/* Images have now been processed and show the culing interface */}\r\n      {areImagesLoaded && (\r\n        <NavProvider>\r\n          <Nav imageBlobArr={imageBlobArr} />\r\n\r\n          {/* Component that is resposible for drawing the netflix or fullscreen view */}\r\n          <CullingView imageBlobArr={imageBlobArr} />\r\n        </NavProvider>\r\n      )}\r\n    </StyledAppSection>\r\n  );\r\n}\r\n\r\nconst StyledAppSection = styled.section`\r\n  :root {\r\n    --background-color: #282828;\r\n    --card-background-color: #414141;\r\n    --selected-image-color: #3f8a4b;\r\n  }\r\n  * {\r\n    box-sizing: border-box;\r\n    -webkit-user-select: none; /* Chrome all / Safari all */\r\n    -moz-user-select: none; /* Firefox all */\r\n    -ms-user-select: none; /* IE 10+ */\r\n    user-select: none;\r\n    overflow-x: hidden;\r\n    ::-webkit-scrollbar {\r\n      width: 5px;\r\n    }\r\n\r\n    /* Track */\r\n    ::-webkit-scrollbar-track {\r\n      //box-shadow: inset 0 0 5px grey;\r\n      border-radius: 2px;\r\n    }\r\n\r\n    /* Handle */\r\n    ::-webkit-scrollbar-thumb {\r\n      background: grey;\r\n      border-radius: 2px;\r\n    }\r\n\r\n    /* Handle on hover */\r\n    ::-webkit-scrollbar-thumb:hover {\r\n      background: #fe8029;\r\n    }\r\n  }\r\n\r\n  background-color: #181818;\r\n`;\r\n","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDom.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}